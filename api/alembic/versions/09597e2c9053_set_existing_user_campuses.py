"""set_existing_user_campuses

Revision ID: 09597e2c9053
Revises: e8a73af8e1ef
Create Date: 2024-01-05 16:08:57.603677

"""
from pathlib import Path
import re
from typing import Iterable, Sequence, Union

from alembic import op
import pandas
import sqlalchemy as sa
from sqlalchemy.orm import Session
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "09597e2c9053"
down_revision: Union[str, None] = "e8a73af8e1ef"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def campus_code_from_user_seed(user_seed: pandas.DataFrame):
    from api.uni.types import CampusCode

    campus_name = str(user_seed.get("Location"))
    print("campus name", campus_name)
    m = re.search(r"\(([A-Z]+)\)", campus_name)
    if not m:
        raise ValueError("Expected a campus code")
    campus_code_mappings = {
        "MELB": CampusCode("MEL"),
        "CAIR": CampusCode("CRN"),
        "ROCK": CampusCode("ROK"),
        "MACK": CampusCode("MKY"),
    }
    return campus_code_mappings[m.group(1)]


def get_seeded_users() -> pandas.DataFrame:
    PROJECT_ROOT = Path(__file__).parent.parent.parent
    user_seed_xlsx = PROJECT_ROOT / "assets" / "seed_users.xlsx"

    df = pandas.read_excel(user_seed_xlsx)
    print("columns", df.columns)
    return df


def get_user_seed_row(seeded_users: pandas.DataFrame, email: str):
    df = seeded_users.query("Email == @email")
    if df.empty:
        raise ValueError("No seeded user with email {0}".format(email))
    return df


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    from api.user.models import User_
    from api.uni.models import Campus

    db = Session(bind=op.get_bind())
    seeded_users = get_seeded_users()

    for user in db.scalars(sa.select(User_)):
        print("updating", user.email)
        row = get_user_seed_row(seeded_users, user.email)
        campus_code = campus_code_from_user_seed(row)
        print("setting campus code", campus_code)

        campus_id = db.scalar(sa.select(Campus.id).where(Campus.code == campus_code))
        assert campus_id is not None
        if user.campus_id != campus_id:
            print("setting user campus id")
        db.add(user)

    db.commit()
    assert False
    op.alter_column("users", "campus_id", existing_type=sa.UUID(), nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.alter_column("users", "campus_id", existing_type=sa.UUID(), nullable=True)

    # ### end Alembic commands ###
