"""empty message

Revision ID: aa440f34497d
Revises: 2b5ec29579ee
Create Date: 2024-02-23 14:02:02.134861

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "aa440f34497d"
down_revision: Union[str, None] = "2b5ec29579ee"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    provision_status_enum = postgresql.ENUM(
        "REQUESTED",
        "APPROVED",
        "PURCHASED",
        "INSTALLED",
        "CANCELLED",
        "REPLACED",
        name="provision_status",
        create_type=False,
    )
    provision_status_enum.create(op.get_bind())
    op.create_table(
        "lab_equipment_installation_item",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("installation_id", sa.UUID(), nullable=False),
        sa.Column("installation_index", sa.INTEGER(), nullable=False),
        sa.Column("replaces_item_id", sa.UUID(), nullable=True),
        sa.Column("name", sa.VARCHAR(length=1024), nullable=False),
        sa.Column(
            "provision_status",
            provision_status_enum,
            nullable=False,
        ),
        sa.Column("last_provisioned_at", postgresql.TIME(timezone=True), nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["installation_id"],
            ["lab_equipment_installation.id"],
        ),
        sa.ForeignKeyConstraint(
            ["replaces_item_id"],
            ["lab_equipment_installation_item.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "installation_id", "installation_index", name="installation_index_uniq"
        ),
    )
    op.create_index(
        op.f("ix_lab_equipment_installation_item_installation_id"),
        "lab_equipment_installation_item",
        ["installation_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_lab_equipment_installation_item_installation_index"),
        "lab_equipment_installation_item",
        ["installation_index"],
        unique=False,
    )
    op.create_index(
        op.f("ix_lab_equipment_installation_item_name"),
        "lab_equipment_installation_item",
        ["name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_lab_equipment_installation_item_provision_status"),
        "lab_equipment_installation_item",
        ["provision_status"],
        unique=False,
    )
    op.alter_column(
        "lab_equipment_installation",
        "provision_status",
        existing_type=postgresql.ENUM(
            name="provisionstatus",
        ),
        type_=provision_status_enum,
        postgresql_using="provision_status::VARCHAR::provision_status",
        existing_nullable=False,
    )
    op.create_index(
        op.f("ix_lab_equipment_installation_provision_status"),
        "lab_equipment_installation",
        ["provision_status"],
        unique=False,
    )
    op.execute("DROP TYPE provisionstatus")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    provisionstatus_enum = postgresql.ENUM(
        "REQUESTED",
        "APPROVED",
        "PURCHASED",
        "INSTALLED",
        "CANCELLED",
        name="provisionstatus",
        create_type=False,
    )
    provisionstatus_enum.create(op.get_bind(), True)
    op.drop_index(
        op.f("ix_lab_equipment_installation_provision_status"),
        table_name="lab_equipment_installation",
    )
    op.alter_column(
        "lab_equipment_installation",
        "provision_status",
        existing_type=postgresql.ENUM(
            name="provision_status",
        ),
        type_=provisionstatus_enum,
        existing_nullable=False,
    )
    op.drop_index(
        op.f("ix_lab_equipment_installation_item_provision_status"),
        table_name="lab_equipment_installation_item",
    )
    op.drop_index(
        op.f("ix_lab_equipment_installation_item_name"),
        table_name="lab_equipment_installation_item",
    )
    op.drop_index(
        op.f("ix_lab_equipment_installation_item_installation_index"),
        table_name="lab_equipment_installation_item",
    )
    op.drop_index(
        op.f("ix_lab_equipment_installation_item_installation_id"),
        table_name="lab_equipment_installation_item",
    )
    op.drop_table("lab_equipment_installation_item")
    op.execute("DROP TYPE provision_status")
    # ### end Alembic commands ###
